{"version":3,"file":"torusUtils.cjs.js","mappings":"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","sources":["webpack://@toruslabs/torus.js/webpack/bootstrap","webpack://@toruslabs/torus.js/webpack/runtime/compat get default export","webpack://@toruslabs/torus.js/webpack/runtime/define property getters","webpack://@toruslabs/torus.js/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/torus.js/webpack/runtime/make namespace object","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/torus.js/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@toruslabs/torus.js/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/torus.js/external commonjs2 \"bn.js\"","webpack://@toruslabs/torus.js/external commonjs2 \"elliptic\"","webpack://@toruslabs/torus.js/external commonjs2 \"json-stable-stringify\"","webpack://@toruslabs/torus.js/external commonjs2 \"web3-utils\"","webpack://@toruslabs/torus.js/external commonjs2 \"loglevel\"","webpack://@toruslabs/torus.js/./src/loglevel.ts","webpack://@toruslabs/torus.js/./src/some.ts","webpack://@toruslabs/torus.js/external commonjs2 \"keccak\"","webpack://@toruslabs/torus.js/./src/utils.ts","webpack://@toruslabs/torus.js/./src/torus.ts","webpack://@toruslabs/torus.js/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import loglevel from \"loglevel\";\n\nconst log = loglevel.getLogger(\"torus.js\");\nlog.disableAll();\n\nexport default log;\n","function capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport class SomeError<T> extends Error {\n  errors: Error[];\n\n  responses: T[];\n\n  predicate: string;\n\n  constructor({ errors, responses, predicate }: { errors: Error[]; responses: T[]; predicate: string }) {\n    super(\"Unable to resolve enough promises.\");\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n}\n\nexport const Some = <K, T>(promises: Promise<K>[], predicate: (resultArr: K[], { resolved }: { resolved: boolean }) => Promise<T>): Promise<T> =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0;\n    const sharedState = { resolved: false };\n    const errorArr: Error[] = new Array(promises.length).fill(undefined);\n    const resultArr: K[] = new Array(promises.length).fill(undefined);\n    let predicateError: Error | string;\n    // eslint-disable-next-line no-promise-executor-return\n    return promises.forEach((x, index) => {\n      return (\n        x\n          .then((resp: K) => {\n            resultArr[index] = resp;\n            return undefined;\n          })\n          .catch((error: Error) => {\n            errorArr[index] = error;\n          })\n          // eslint-disable-next-line promise/no-return-in-finally\n          .finally(() => {\n            if (sharedState.resolved) return;\n            return predicate(resultArr.slice(0), sharedState)\n              .then((data) => {\n                sharedState.resolved = true;\n                resolve(data);\n                return undefined;\n              })\n              .catch((error) => {\n                // log only the last predicate error\n                predicateError = error;\n              })\n              .finally(() => {\n                finishedCount += 1;\n                if (finishedCount === promises.length) {\n                  const errors = Object.values(\n                    resultArr.reduce((acc: Record<string, string>, z) => {\n                      if (z) {\n                        const { id, error } = z as { id?: string; error?: { data?: string } };\n                        if (error?.data?.length > 0) {\n                          if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);\n                          else acc[id] = error.data;\n                        }\n                      }\n                      return acc;\n                    }, {})\n                  );\n\n                  if (errors.length > 0) {\n                    // Format-able errors\n                    const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join(\"\\n\")}` : errors[0];\n                    reject(new Error(msg));\n                  } else {\n                    reject(\n                      new SomeError({\n                        errors: errorArr,\n                        responses: resultArr,\n                        predicate: (predicateError as Error)?.message || (predicateError as string),\n                      })\n                    );\n                  }\n                }\n              });\n          })\n      );\n    });\n  });\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"keccak\");","import { generateJsonRPCObject, post } from \"@toruslabs/http-helpers\";\nimport JsonStringify from \"json-stable-stringify\";\nimport createKeccakHash from \"keccak\";\n\nimport { JRPCResponse, KeyAssignInput, KeyLookupResult, SignerResponse, VerifierLookupResponse } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s: number | number[], k: number): number[][] => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({ length: set }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [] as number[][]);\n  }\n\n  const combs: number[][] = [];\n  let tailCombs: number[][] = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nexport const thresholdSame = <T>(arr: T[], t: number): T | undefined => {\n  const hashMap: Record<string, number> = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\n\nexport const keyLookup = async (endpoints: string[], verifier: string, verifierId: string): Promise<KeyLookupResult> => {\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<VerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(\"VerifierLookupRequest\", {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error(\"lookup request failed\", err))\n  );\n  return Some<void | JRPCResponse<VerifierLookupResponse>, KeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1);\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    );\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult });\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\n\nexport const waitKeyLookup = (endpoints: string[], verifier: string, verifierId: string, timeout: number): Promise<KeyLookupResult> =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n\nexport const keyAssign = async ({\n  endpoints,\n  torusNodePubs,\n  lastPoint,\n  firstPoint,\n  verifier,\n  verifierId,\n  signerHost,\n  network,\n}: KeyAssignInput): Promise<void> => {\n  let nodeNum: number;\n  let initialPoint: number | undefined;\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    // nodeNum = endpoints.indexOf(\"https://torus-node.ens.domains/jrpc\");\n    log.info(\"keyassign\", nodeNum, endpoints[nodeNum]);\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n\n  const data = generateJsonRPCObject(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString(),\n  });\n  try {\n    const signedData = await post<SignerResponse>(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    return await post<void>(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n      }\n    );\n  } catch (error) {\n    log.error(error.status, error.message, error, \"key assign error\");\n    const acceptedErrorMsgs = [\n      // Slow node\n      \"Timed out\",\n      \"Failed to fetch\",\n      \"cancelled\",\n      \"NetworkError when attempting to fetch resource.\",\n      // Happens when the node is not reachable (dns issue etc)\n      \"TypeError: Failed to fetch\", // All except iOS and Firefox\n      \"TypeError: cancelled\", // iOS\n      \"TypeError: NetworkError when attempting to fetch resource.\", // Firefox\n    ];\n    if (\n      error?.status === 502 ||\n      acceptedErrorMsgs.includes(error.message) ||\n      (error.message && error.message.includes(\"reason: getaddrinfo EAI_AGAIN\"))\n    )\n      return keyAssign({ endpoints, torusNodePubs, lastPoint: nodeNum + 1, firstPoint: initialPoint, verifier, verifierId, signerHost, network });\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`\n    );\n  }\n};\n\nexport function keccak256(a: string | Buffer): string {\n  const hash = createKeccakHash(\"keccak256\").update(a).digest().toString(\"hex\");\n  return `0x${hash}`;\n}\n","import { decrypt, generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport type { INodePub } from \"@toruslabs/fetch-node-details\";\nimport { Data, generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec as EC } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\nimport { toChecksumAddress } from \"web3-utils\";\n\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  JRPCResponse,\n  MetadataParams,\n  RetrieveSharesResponse,\n  SetCustomKeyOptions,\n  ShareRequestResult,\n  TorusCtorOptions,\n  TorusPublicKey,\n  VerifierLookupResponse,\n  VerifierParams,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\nimport { GetOrSetNonceError, kCombinations, keccak256, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from \"./utils\";\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  public metadataHost: string;\n\n  public allowHost: string;\n\n  public serverTimeOffset: number;\n\n  public enableOneKey: boolean;\n\n  public signerHost: string;\n\n  public network: string;\n\n  protected ec: EC;\n\n  constructor({\n    enableOneKey = false,\n    metadataHost = \"https://metadata.tor.us\",\n    allowHost = \"https://signer.tor.us/api/allow\",\n    signerHost = \"https://signer.tor.us/api/sign\",\n    serverTimeOffset = 0,\n    network = \"mainnet\",\n  }: TorusCtorOptions = {}) {\n    this.ec = new EC(\"secp256k1\");\n    this.metadataHost = metadataHost;\n    this.allowHost = allowHost;\n    this.enableOneKey = enableOneKey;\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n    this.signerHost = signerHost;\n    this.network = network;\n  }\n\n  static enableLogging(v = true): void {\n    if (v) log.enableAll();\n    else log.disableAll();\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  static isGetOrSetNonceError(err: unknown): boolean {\n    return err instanceof GetOrSetNonceError;\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n  async getUserTypeAndAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    doesKeyAssign = false\n  ): Promise<TorusPublicKey> {\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    let isNewKey = false;\n    let finalKeyResult: VerifierLookupResponse;\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      if (!doesKeyAssign) {\n        throw new Error(\"Verifier + VerifierID has not yet been assigned\");\n      }\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getUserTypeAndAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n      let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n      let pubNonce: { x: string; y: string } | undefined;\n\n      try {\n        nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n        nonce = new BN(nonceResult.nonce || \"0\", 16);\n        typeOfUser = nonceResult.typeOfUser;\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n      if (nonceResult.typeOfUser === \"v1\") {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        // pubNonce is never deleted, so we can use it to always get the tkey\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n        pubNonce = nonceResult.pubNonce;\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n\n      const finalX = modifiedPubKey.getX().toString(16);\n      const finalY = modifiedPubKey.getY().toString(16);\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      log.debug(\"> torus.js/getUserTypeAndAddress\", { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce });\n      return {\n        typeOfUser,\n        address,\n        X: finalX,\n        Y: finalY,\n        metadataNonce: nonce,\n        pubNonce,\n        upgraded: (nonceResult as { upgraded?: boolean })?.upgraded || undefined,\n      };\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }: SetCustomKeyOptions): Promise<void> {\n    let torusKey: BN;\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16);\n    } else {\n      const privKey = new BN(privKeyHex as string, 16);\n      torusKey = privKey.sub(metadataNonce as BN).umod(this.ec.curve.n);\n    }\n    const customKey = new BN(customKeyHex, 16);\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey);\n    await this.setMetadata(data);\n  }\n\n  async retrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<RetrieveSharesResponse> {\n    const promiseArr = [];\n    await get<void>(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n          network: this.network,\n        },\n      },\n      { useAPIKey: true }\n    );\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate();\n    const pubKey = getPublic(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(idToken);\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post<JRPCResponse<CommitmentRequestResult>>(\n        endpoints[i],\n        generateJsonRPCObject(\"CommitmentRequest\", {\n          messageprefix: \"mug00\",\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    })\n      .then((responses) => {\n        const promiseArrRequest: Promise<void | JRPCResponse<ShareRequestResult>>[] = [];\n        const nodeSigs = [];\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push((responses[i] as JRPCResponse<CommitmentRequestResult>).result);\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          const p = post<JRPCResponse<ShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(\"ShareRequest\", {\n              encrypted: \"yes\",\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n        return Some<void | JRPCResponse<ShareRequestResult>, BN | undefined>(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x);\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          );\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises: Promise<void | Buffer>[] = [];\n            const nodeIndexes: BN[] = [];\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              const currentShareResponse = shareResponses[i] as JRPCResponse<ShareRequestResult>;\n              if (currentShareResponse?.result?.keys?.length > 0) {\n                currentShareResponse.result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)));\n                const firstKey = currentShareResponse.result.keys[0];\n                if (firstKey.Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                    iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                    mac: Buffer.from(firstKey.Metadata.mac, \"hex\"),\n                    // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n                  };\n                  sharePromises.push(\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\"),\n                    }).catch((err) => log.debug(\"share decryption\", err))\n                  );\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined));\n              }\n              nodeIndexes.push(new BN(indexes[i], 16));\n            }\n            const sharesResolved = await Promise.all(sharePromises);\n            if (sharedState.resolved) return undefined;\n\n            const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n              return acc;\n            }, [] as { index: BN; value: BN }[]);\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n            let privateKey: BN | null = null;\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j];\n              const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index));\n              const shares = currentCombiShares.map((x) => x.value);\n              const indices = currentCombiShares.map((x) => x.index);\n              const derivedPrivateKey = this.lagrangeInterpolation(shares, indices);\n              if (!derivedPrivateKey) continue;\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n              const decryptedPubKeyY = decryptedPubKey.slice(66);\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey;\n                break;\n              }\n            }\n            if (privateKey === undefined || privateKey === null) {\n              throw new Error(\"could not derive private key\");\n            }\n            return privateKey;\n          }\n          throw new Error(\"invalid\");\n        });\n      })\n      .then(async (returnedKey) => {\n        let privateKey = returnedKey;\n        if (!privateKey) throw new Error(\"Invalid private key returned\");\n        const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n        const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n        const decryptedPubKeyY = decryptedPubKey.slice(66);\n        let metadataNonce: BN;\n        if (this.enableOneKey) {\n          const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);\n          metadataNonce = new BN(nonce || \"0\", 16);\n        } else {\n          metadataNonce = await this.getMetadata({ pub_key_X: decryptedPubKeyX, pub_key_Y: decryptedPubKeyY });\n        }\n        log.debug(\"> torus.js/retrieveShares\", { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) });\n\n        privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n);\n\n        const ethAddress = this.generateAddressFromPrivKey(privateKey);\n        log.debug(\"> torus.js/retrieveShares\", { ethAddress, privKey: privateKey.toString(16) });\n\n        // return reconstructed private key and ethereum address\n        return {\n          ethAddress,\n          privKey: privateKey.toString(\"hex\", 64),\n          metadataNonce,\n        };\n      });\n  }\n\n  async getMetadata(data: Omit<MetadataParams, \"set_data\" | \"signature\">, options: RequestInit = {}): Promise<BN> {\n    try {\n      const metadataResponse = await post<{ message?: string }>(`${this.metadataHost}/get`, data, options, { useAPIKey: true });\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0);\n      }\n      return new BN(metadataResponse.message, 16); // nonce\n    } catch (error) {\n      log.error(\"get metadata error\", error);\n      return new BN(0);\n    }\n  }\n\n  generateMetadataParams(message: string, privateKey: BN): MetadataParams {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    };\n    const sig = key.sign(keccak256(stringify(setData)).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n    };\n  }\n\n  async setMetadata(data: MetadataParams, options: RequestInit = {}): Promise<string> {\n    try {\n      const metadataResponse = await post<{ message: string }>(`${this.metadataHost}/set`, data, options, { useAPIKey: true });\n      return metadataResponse.message; // IPFS hash\n    } catch (error) {\n      log.error(\"set metadata error\", error);\n      return \"\";\n    }\n  }\n\n  lagrangeInterpolation(shares: BN[], nodeIndex: BN[]): BN | null {\n    if (shares.length !== nodeIndex.length) {\n      return null;\n    }\n    let secret = new BN(0);\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1);\n      let lower = new BN(1);\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg());\n          upper = upper.umod(this.ec.curve.n);\n          let temp = nodeIndex[i].sub(nodeIndex[j]);\n          temp = temp.umod(this.ec.curve.n);\n          lower = lower.mul(temp).umod(this.ec.curve.n);\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n);\n      secret = secret.add(delta);\n    }\n    return secret.umod(this.ec.curve.n);\n  }\n\n  generateAddressFromPrivKey(privateKey: BN): string {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(publicKey, \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  generateAddressFromPubKey(publicKeyX: BN, publicKeyY: BN): string {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString(\"hex\", 64), y: publicKeyY.toString(\"hex\", 64) });\n    const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n    log.info(key.getPublic().encode(\"hex\", false), \"public key\");\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n    return toChecksumAddress(ethAddressLower);\n  }\n\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n  async getPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    isExtended = false\n  ): Promise<string | TorusPublicKey> {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, torusNodePubs, verifier, verifierId, isExtended });\n\n    let finalKeyResult: VerifierLookupResponse | undefined;\n    let isNewKey = false;\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      });\n      const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n      let nonceResult: GetOrSetNonceResult;\n      let nonce: BN;\n      let modifiedPubKey: curve.base.BasePoint;\n      let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n      let pubNonce: { x: string; y: string } | undefined;\n      if (this.enableOneKey) {\n        try {\n          nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);\n          nonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n        } catch {\n          throw new GetOrSetNonceError();\n        }\n        if (nonceResult.typeOfUser === \"v1\") {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X, y: Y })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n        } else if (nonceResult.typeOfUser === \"v2\") {\n          if (nonceResult.upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X, y: Y })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n            pubNonce = nonceResult.pubNonce;\n          }\n        } else {\n          throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n        }\n      } else {\n        typeOfUser = \"v1\";\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y });\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());\n      }\n\n      X = modifiedPubKey.getX().toString(16);\n      Y = modifiedPubKey.getY().toString(16);\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());\n      log.debug(\"> torus.js/getPublicAddress\", { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce });\n\n      if (!isExtended) return address;\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n        upgraded: (nonceResult as { upgraded?: boolean })?.upgraded || undefined,\n      };\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  async getOrSetNonce(X: string, Y: string, privKey?: BN, getOnly = false): Promise<GetOrSetNonceResult> {\n    let data: Data;\n    const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey);\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      };\n    }\n    return post<GetOrSetNonceResult>(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true });\n  }\n\n  async getNonce(X: string, Y: string, privKey?: BN): Promise<GetOrSetNonceResult> {\n    return this.getOrSetNonce(X, Y, privKey, true);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    const privKeyBN = new BN(privKey, 16);\n    const nonceBN = new BN(nonce, 16);\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString(\"hex\");\n  }\n}\n\nexport default Torus;\n","export * from \"./interfaces\";\nexport { default } from \"./torus\";\nexport * from \"./utils\";\n"],"names":["loglevel","log","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","Error","constructor","_ref","errors","responses","predicate","_defineProperty","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","generateJsonRPCObject","post","JsonStringify","createKeccakHash","GetOrSetNonceError","kCombinations","s","k","set","from","_","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","keyLookup","endpoints","verifier","verifierId","lookupPromises","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","network","nodeNum","initialPoint","Math","floor","random","info","signedData","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","_objectSpread","status","acceptedErrorMsgs","includes","keccak256","a","hash","update","digest","decrypt","generatePrivate","getPublic","get","setAPIKey","setEmbedHost","BN","ec","EC","toChecksumAddress","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","arguments","enableLogging","v","enableAll","apiKey","embedHost","isGetOrSetNonceError","getUserTypeAndAddress","doesKeyAssign","isNewKey","finalKeyResult","assignResult","debug","pub_key_X","pub_key_Y","keys","nonceResult","nonce","modifiedPubKey","typeOfUser","pubNonce","getOrSetNonce","keyFromPublic","y","add","keyFromPrivate","finalX","getX","finalY","getY","address","generateAddressFromPubKey","metadataNonce","upgraded","setCustomKey","_ref2","privKeyHex","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","retrieveShares","indexes","verifierParams","idToken","extraParams","promiseArr","tmpKey","pubKey","tokenCommitment","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","sharePromises","nodeIndexes","currentShareResponse","sort","b","Index","cmp","firstKey","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","ciphertext","Share","padStart","sharesResolved","all","decryptedShares","curr","value","allCombis","privateKey","currentCombi","currentCombiShares","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","returnedKey","getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","nodeIndex","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","ethAddressLower","publicKeyX","publicKeyY","getPublicAddress","_ref3","isExtended","getOnly","getPostboxKeyFrom1OutOf1","privKeyBN","nonceBN","default"],"sourceRoot":""}